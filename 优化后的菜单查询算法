
    @Override
    public List<Menu> getMenuByUsername(String username) {
 //       long begin = System.currentTimeMillis();

        /**
         * 1.根据用户名查询用户所能访问的所有菜单
         * 2.遍历菜单,找出父类菜单
         * 3.根据父类菜单的id,在所有菜单集合中找到子菜单
         * 4.根据子菜单id,在所有菜单集合中找到子菜单的子菜单
         * 5.一直查询
         */

        // 查询用户能访问的所有菜单集合
        List<Menu> menus = menuDao.findAllMenuByUsername(username);
        List<Menu> menuParent = new ArrayList<>();
        List<Menu> menuChildren = new ArrayList<>();
        // 为了快速查询,我们将建立映射关系
        Map<Integer,ArrayList<Menu>> menuMapChildren = new HashMap<>();
        if(menus != null && menus.size() > 0){
            for (Menu menu : menus) {
                if (menu.getParentMenuId() == null){
                    // 将找到的父类菜单添加到容器中
                    menuParent.add(menu);
                    continue;
                }
                // 添加到子菜单的存储集合中
                menuChildren.add(menu);
                // 不是顶级父菜单,完善父类菜单和子类菜单集合的映射关系
                ArrayList menuTemp = menuMapChildren.get(menu.getParentMenuId());
                if(menuTemp == null){
                    // 第一次建立映射关系,创建子菜单集合
                    menuTemp = new ArrayList<>();
                }
                menuTemp.add(menu);
                // 完善映射关系
                menuMapChildren.put(menu.getParentMenuId(),menuTemp);
            }
        }
        // 完善子菜单的关系
        for (Menu menu : menuChildren) {
            count++;
            List<Menu> menuListChildren = menuMapChildren.get(menu.getId());
            menu.setChildren(menuListChildren);
        }

        // 完善父菜单的关系
        for (Menu menu : menuParent) {
            count++;
            // findChildrenMenu
            List<Menu> menuListChildren = menuMapChildren.get(menu.getId());
            menu.setChildren(menuListChildren);
        }
        return menuParent;
    }
